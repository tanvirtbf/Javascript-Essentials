// class Person {
//   myName = 'Tanvir Ahmed'

//   showName (){
//     return this.myName
//   }
// }

// const person1 = new Person()
// console.log(person1.showName())


// Same this goes in object

// const obj = {
//   myName : 'Tanvir',
//   showName (){
//     return this.myName
//   }
// }
// console.log(obj.showName())



// Constructor 
// class Person {
//   myName = 'Tanvir Ahmed'

//   constructor (name){
//     this.myName = name
//     console.log(this.myName)
//   }
//   showName (){
//     return this.myName
//   }
// }

// const person1 = new Person("Tanvir")
// console.log(person1)



// Inheritance
// class Parent {
//   myName = 'Tanvir'
//   myAge = 23
//   showName (){
//     console.log(this.myName)
//   }
// }
// const person1 = new Parent()

// class Child extends Parent {

// }
// const childOfPerson1 = new Child()
// console.log(childOfPerson1)


// class Parent {
//   constructor(){
//     console.log('Parent Class Constructor!')
//   }
// }
// class Child extends Parent {

// }
// const child1 = new Parent()


// Super Keyword
// class Parent {
//   parentName = 'Tanvir'
//   constructor (name){
//     this.parentName = name
//   }
//   showParentName (){
//     console.log(this.parentName)
//   }
// }
// class Child extends Parent {
//   constructor (){
//     super("Tanvir Ahmed") 
//   }
// }

// const parent = new Parent()
// console.log(parent.showParentName())
// const child1 = new Child()
// console.log(child1.showParentName())
// console.log(parent.showParentName())


// Object-Oriented Programming (OOP)-‡¶è inheritance ‡¶®‡¶ø‡ßü‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü super keyword ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§ ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ö‡¶®‡ßá‡¶ï‡ßá‡¶á super ‡¶è‡¶∞ ‡¶Ü‡¶∏‡¶≤ ‡¶ï‡¶æ‡¶ú ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶®‡¶á ‡¶¨‡¶æ ‡¶ï‡¶ñ‡¶® ‡¶è‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá, ‡¶§‡¶æ ‡¶≠‡¶æ‡¶≤‡ßã‡¶≠‡¶æ‡¶¨‡ßá ‡¶ú‡¶æ‡¶®‡¶ø ‡¶®‡¶æ‡•§

// ‡¶Ü‡¶ú ‡¶ö‡¶≤‡ßÅ‡¶® super keyword-‡¶è‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶ï‡¶æ‡¶ú ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ø‡¶ï ‡¶¶‡¶ø‡¶ï ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶®‡¶ø‡¶á‡•§

// üî• super keyword-‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶¶‡ßÅ‡¶á‡¶ü‡¶ø ‡¶ï‡¶æ‡¶ú:
// ‚úÖ ‡ßß. Parent Class-‡¶è‡¶∞ Constructor-‡¶è ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
// Inheritance ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßü child class-‡¶è‡¶∞ constructor ‡¶•‡ßá‡¶ï‡ßá parent class-‡¶è‡¶∞ constructor-‡¶è ‡¶°‡¶æ‡¶ü‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá super() ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§ ‡¶è‡¶ü‡¶ø parent class-‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶ó‡ßÅ‡¶≤‡ßã ‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá initialize ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßá, ‡¶Ø‡¶æ‡¶§‡ßá child class ‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶¨‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§

// üëâ ‡¶¨‡¶ø‡¶∑‡ßü‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶¨‡¶á ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£, ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶Ø‡¶¶‡¶ø child class-‡¶è‡¶∞ constructor-‡¶è super() ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá JavaScript ‡¶è‡¶ï‡¶ü‡¶ø error ‡¶¶‡ßá‡¶¨‡ßá, ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ parent class-‡¶è‡¶∞ properties ‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá initialize ‡¶π‡¶¨‡ßá ‡¶®‡¶æ‡•§

// ‚úÖ ‡ß®. Parent Class-‡¶è‡¶∞ Method ‡¶è‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ (Method Overriding Handling)
// Inheritance-‡¶è parent ‡¶è‡¶¨‡¶Ç child class-‡¶è‡¶∞ method-‡¶è‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶è‡¶ï‡¶á ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§ ‡¶§‡¶ñ‡¶® method overriding ‡¶ò‡¶ü‡ßá, ‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé child class-‡¶è‡¶∞ method parent-‡¶è‡¶∞ method ‡¶ï‡ßá replace ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡ßü‡•§

// ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶Æ‡¶∞‡¶æ child class-‡¶è‡¶∞ method ‡¶•‡ßá‡¶ï‡ßá parent class-‡¶è‡¶∞ original method call ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶á, ‡¶§‡¶æ‡¶π‡¶≤‡ßá super.methodName() ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§

// üëâ ‡¶è‡¶∞ ‡¶´‡¶≤‡ßá:

// Parent class-‡¶è‡¶∞ method call ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶π‡ßü,

// Method overriding-‡¶è‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶ï‡ßã‡¶®‡ßã conflict ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü ‡¶®‡¶æ,

// Child class ‡¶§‡¶æ‡¶∞ ‡¶®‡¶ø‡¶ú‡¶∏‡ßç‡¶¨ behavior retain ‡¶ï‡¶∞‡ßá‡¶ì parent class-‡¶è‡¶∞ behavior ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§

// üéØ ‡¶ï‡ßá‡¶® super keyword ‡¶è‡¶§ ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£?
// ‚úÖ Code Reusability: Parent class-‡¶è‡¶∞ logic ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡ßü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü, ‡¶Ø‡¶æ DRY (Don't Repeat Yourself) principle ‡¶Æ‡ßá‡¶®‡ßá ‡¶ö‡¶≤‡ßá‡•§
// ‚úÖ Method Overriding Issue ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®: Parent class-‡¶è‡¶∞ method ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü, ‡¶Ø‡¶æ function overriding-‡¶è‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßá‡•§
// ‚úÖ Object Construction ‡¶∏‡¶π‡¶ú ‡¶ï‡¶∞‡ßá: Parent class-‡¶è‡¶∞ properties ‡¶è‡¶¨‡¶Ç methods ‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá inherit ‡¶π‡ßü, child class-‡¶è‡¶∞ code ‡¶Ü‡¶∞‡¶ì ‡¶ï‡ßç‡¶≤‡¶ø‡¶® ‡¶ì ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡ßá‡¶¨‡¶≤ ‡¶•‡¶æ‡¶ï‡ßá‡•§

// üí° ‡¶∂‡ßá‡¶∑ ‡¶ï‡¶•‡¶æ:
// super() ‡¶õ‡¶æ‡ßú‡¶æ child class-‡¶è‡¶∞ constructor ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§

// super.methodName() method overriding-‡¶è‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßá‡•§

// super inheritance ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø‡¶§‡¶Æ ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶è‡¶ï‡¶ü‡¶ø keyword‡•§



// Some Example of Super keyword
// class Parent {
//   myName = 'Tanvir'
//   myAge = 25
//   constructor(name, age){
//     this.myName = name
//     this.myAge = age
//   }

//   showName(){
//     console.log('Parent Name : ', this.myName)
//   }
//   showAge(){
//     console.log('Parent Age : ', this.myAge)
//   }
// }

// class Child extends Parent {
//   constructor(){
//     super("Tanvir Ahmed", 26)
//   }

//   showDetails(){
//     console.log(this.myName)
//     console.log(this.myAge)
//     this.showName()
//     this.showAge()
//   }
// }

// const child1 = new Child()
// console.log(child1.showDetails())



// Private 
class Parent {
  #myName = 'Tanvir Ahmed'

  showName(){
    return this.#myName
  }

}
const parent = new Parent()
console.log(parent.showName())



