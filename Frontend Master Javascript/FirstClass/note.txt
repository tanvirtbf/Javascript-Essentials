1. kono html file jokhon browser e run kora hoy tokhon er sathe onk gula javascript file thakte pare . mone rakhte hobe browser sob somoy sobgula javascript file ke eksathe kore ekta file e aina download kore . jar karone kono ekta file e jodi same variable er kono variable onno kono file e hoy tahole tara overwrite hobe . eta bujhar jonno app.js er moddhe fileName ekta variable er data dilam 'Tanvir' and app2.js er moddhe fileName='Ahmed' dilam . akhn app2.js file er moddhe setTimeout e 2 second diye fileName console log korar por dekha jay app.js er filename er value ekhane print hocche . karon jotokkhon e app2.js file run hoise totokkhon porjonto app2.js suspend obosthay chilo. 

2. jokhon var, let, const use na kore kono variable declare kora hoy tokhon seta window object er moddhe set hoy . jemon name='tanvir' ,, ekhane name variable ta window object e set hoise . akhn jodi ami console.log(window.name) dei tahole answer ashbe 'tanvir' . similerly var diyeo kono variable declare korle seta window object er moddhe set hoy . etai problem create kore karon ekta project er onk gula js file jehetu ekta single file er moddhe attach hoye browser e run kore tai browser sei single js file er jonno ektaii window object dibe . and sei js file gular moddhe variable overwrite houyar chance thake jehetu sob gulaii window object er moddhe save hobe

3. let or const kokhono block scope e hoy na , borong let or const block scope create kore . jemon :=> 
    function sayHi(){
        if(true){
            var helloWorld = 'Hello World!'
        }
        console.log(helloWorld)
    }
    sayHi()
ai code tar 2 or 3 number line e debugger lagaiya jodi run kora hoy tokhon sources tab e giya dekha jabe only global scope and local scope ache . ekhane helloWorld variable ta local scope e ache karon var holo local scope . and global scope to always thakeii . kintu...
    function sayHi(){
        if(true){
            var helloWorld = 'Hello World!'
            let asd = 'asdfg'
        }
        console.log(helloWorld)
    }
    sayHi() 
ai code run kore 2 number line e debugger lagaile sources tab er moddhe ekta arekta scope dekha jabe jar nam block scope . ekhane if() or for() or jekono block er jonno block scope create hoy na . borong let const er jonno block scope create hoy
and jokhon debugger let asd = 'asdfg' line ta execute kore sathe sathe sekhan theke block scope chole jay 

4. Data Types 

# Primitive Data Types --- undefined, null, number, BigInt, Symbol, String, Boolean
# Non-Primitive Data Types --- object

ekhane undefined and null holo special type er data type . undefined and null majhe moddhe as a value treat hoye thake . 

undefined and null er moddhe parthokko ki ? 
undefined holo default value and null holo explicit value . tar mane ki ? tar mane holo jodi ekta variable declare kore sekhane kono value add na kori tahole by default sei variable er value undefined . and jodi amra explicitly kono variable er value null dei tokhon sei variable er valu null hobe . explicitly mane holo nije theke manually deya . kintu undefined maneo khali, null maneo khali . 

null ভেরিয়েবলের জন্য মেমরি বরাদ্দ হয়, কারণ এটি অবজেক্ট টাইপের একটি মান।
undefined-এর জন্যও মেমরি বরাদ্দ হয়, তবে এটি খুব সামান্য, কারণ এটি ডিফল্ট মান।

1. null:
null মানে হলো ইচ্ছাকৃতভাবে "কিছু নেই" সেট করা।
এটি সাধারণত ব্যবহার করা হয় যখন আপনি কোনো ভেরিয়েবলের ভ্যালু খালি বা ফাঁকা রাখতে চান এবং তা স্পষ্টভাবে দেখাতে চান।
উদাহরণ:
let myVariable = null; // ইচ্ছাকৃতভাবে ফাঁকা করা হয়েছে
কিছু বৈশিষ্ট্য:
এটা একটা অবজেক্ট টাইপের মান। (হ্যাঁ, এটা মজার হলেও সত্যি!)
এর মানে হলো "খালি" বা "অকার্যকর অবস্থা"।
ব্যবহার:
ডাটাবেজ থেকে ডাটা না পাওয়া গেলে সেটাকে null করা হয়।
কোনো ভেরিয়েবল খালি বা রিসেট করতে হলে null সেট করা হয়।

2. undefined:
undefined মানে হলো ভেরিয়েবল ঘোষণা করা হয়েছে কিন্তু কোনো মান সেট করা হয়নি।
এটি JavaScript ডিফল্টভাবে ব্যবহার করে যদি ভেরিয়েবলে কোনো মান অ্যাসাইন না করা হয়।
উদাহরণ:
let myVariable; // মান সেট করা হয়নি, তাই undefined
console.log(myVariable); // undefined দেখাবে
কিছু বৈশিষ্ট্য:
এটা টাইপ হিসেবে undefined।
যদি কোনো ফাংশন কিছু রিটার্ন না করে, তখন তা undefined রিটার্ন করে।
ব্যবহার:
ভেরিয়েবল ঘোষণা করা হয়েছে কিন্তু মান দেয়া হয়নি।
অবজেক্টের এমন কোনো প্রপার্টি অ্যাক্সেস করা হলে যা নেই, তা undefined দেখাবে।


মূল পার্থক্য টেবিল আকারে:
বৈশিষ্ট্য        null	                            undefined
অর্থ	      ইচ্ছাকৃতভাবে খালি করা।	            কোনো মান সেট করা হয়নি।
টাইপ	     অবজেক্ট	                         undefined টাইপ
ডিফল্ট মান?	  না, এটি ম্যানুয়ালি সেট করতে হয়।	      হ্যাঁ, ডিফল্ট মান।
ব্যবহার	       ভেরিয়েবল বা অবজেক্ট ফাঁকা করতে।	    মান অ্যাসাইন করা হয়নি এমন ক্ষেত্রে।

১. null এবং মেমরি স্পেস:
যদি কোনো ভেরিয়েবলের মান null সেট করা হয়, তাহলে মেমরি স্পেস ব্যবহার করা হয়।

null আসলে একটি স্পেশাল অবজেক্ট টাইপের মান।
যখন ভেরিয়েবলে null রাখা হয়, তখন JavaScript সেই ভেরিয়েবলের জন্য রেফারেন্স টাইপ (যেমন অবজেক্ট) হিসেবে মেমরি বরাদ্দ করে।
যদিও null কোনো ডাটা ধরে রাখে না, এটি স্পষ্টভাবে দেখায় যে ভেরিয়েবলটি ইচ্ছাকৃতভাবে "খালি" রাখা হয়েছে।
এই কারণে null ভেরিয়েবলের জন্য কিছু মেমরি অ্যাসাইন হয়।
উদাহরণ:
let myVariable = null;
// মেমরি বরাদ্দ হয়েছে কিন্তু মান নেই (খালি হিসেবে সেট করা হয়েছে)।


২. undefined এবং মেমরি স্পেস:
যদি কোনো ভেরিয়েবলের মান undefined হয়, তাহলে মেমরি স্পেস দখল হয়, তবে তা খুব সামান্য।

undefined মানে হলো, ভেরিয়েবল ডিক্লেয়ার করা হয়েছে, কিন্তু এতে কোনো মান অ্যাসাইন করা হয়নি।
JavaScript এই ভেরিয়েবলের জন্য মেমরি বরাদ্দ করে, কারণ ভেরিয়েবল ডিক্লেয়ার করা হয়েছে।
মেমরিতে শুধুমাত্র একটি ডিফল্ট মান রাখা হয়, যা undefined।
উদাহরণ:
let myVariable;
// মেমরি বরাদ্দ হয়েছে, কিন্তু কোনো মান সেট করা হয়নি, তাই undefined।

উপসংহার:
null ভেরিয়েবলের জন্য মেমরি বরাদ্দ হয়, কারণ এটি অবজেক্ট টাইপের একটি মান।
undefined-এর জন্যও মেমরি বরাদ্দ হয়, তবে এটি খুব সামান্য, কারণ এটি ডিফল্ট মান।
তবে বাস্তবে এই পার্থক্য খুব কমই গুরুত্বপূর্ণ হয়, কারণ আধুনিক JavaScript ইঞ্জিনগুলি মেমরি ব্যবস্থাপনায় অত্যন্ত দক্ষ।



# Number Data Type : 

JavaScript-এ Number() একটি বিল্ট-ইন কন্সট্রাক্টর এবং মেথড, যা কোনো মানকে (value) সংখ্যা (number) টাইপে রূপান্তর করে। এটি সাধারণত স্ট্রিং বা অন্য কোনো ডেটা টাইপকে সংখ্যা হিসাবে কনভার্ট করতে ব্যবহৃত হয়।

Number() মেথডের কাজ:
স্ট্রিংকে সংখ্যা বানানো: কোনো স্ট্রিং যদি সংখ্যা হিসেবে রূপান্তরযোগ্য হয়, তাহলে এটি সংখ্যায় কনভার্ট করবে।
বুলিয়ান থেকে সংখ্যা: true কে ১ এবং false কে ০-তে কনভার্ট করবে।
অন্য ডেটা টাইপকে সংখ্যা বানানো: অন্যান্য ডেটা টাইপকে সম্ভাব্য সংখ্যায় রূপান্তর করবে, যদি সম্ভব হয়।
যদি কনভার্ট করা সম্ভব না হয়: যদি কোনো মানকে সংখ্যায় রূপান্তর করা সম্ভব না হয়, তাহলে এটি NaN (Not a Number) রিটার্ন করবে।

Example : 
console.log(Number("123"));   // 123 (স্ট্রিং থেকে সংখ্যা)
console.log(Number("12.34")); // 12.34 (ডেসিমাল সংখ্যা)
console.log(Number("abc"));   // NaN (রূপান্তর সম্ভব নয়)
console.log(Number(true));    // 1 (বুলিয়ান থেকে সংখ্যা)
console.log(Number(false));   // 0
console.log(Number(null));    // 0
console.log(Number(undefined)); // NaN

নোট:
Number() শুধুমাত্র মানকে কনভার্ট করে, এটি কোনো হিসাব বা সংখ্যা যোগ করার কাজ করে না।
এটি একটি স্ট্যাটিক মেথড এবং সরাসরি Number() নামে ব্যবহার করা হয়।
এটি বিশেষত তখন ব্যবহার করা হয় যখন আপনাকে নিশ্চিত করতে হয় যে কোনো মান একটি বৈধ সংখ্যা।


