akhn amra janbo javascript er code browser kivabe execute kore . ki ki process hoy segula . 
jokhonii html file browser e load hoy tokhon sekhane <script src="app.js" ></script> dekhte pay . sekhan theke app.js file ta browser download korte thake . to browser js file ta ke stream akare download korte thake . i mean chunk type akare . jemon "12DF2123" etc . eta ke bole stream of data. tarpor stream er sahajje browser tokens create korte thake. tokhon ai token gula ke niye javascript engine ekta tree banay . setar nam AST(Abstract Syntex Tree) . jemon: 
code : function hello(){
    console.log('Hello World!')
}
hello()
akhon javascript ai function er code gula ke evabe token e vag kore : 
function keyword 
hello() function name
console.log function 
'Hello World' printing text
hello() function call 

evabe code gula ke choto choto akare vag kore and prottekta vag ek ekta token hishebe count hoy . egula diyaii AST banano hoy

AST ki ? 
AST amader code er ekta structure hoye thake.

token and AST er moddhe ekta process hoye thake . tar nam parsing. 

parsing er 2 ta phase thake :
1. Syntax Checking (jodi code er syntax wrong hoy tahole parsing phase er moddhei detect hoye thake)
2. Scope and initialization


AST er por next ki ? 
AST houyar por tarpor AST ke niye Interpreter er kase jauya hoy.

Interpreter er kaj ki ?
interpreter amader AST code ke translate kore. translate korar por byte code dey. and ai byte code tai browser e execute hoy . 

tahole akhon porjonto code execute houyar ki ki process janlam ? 
1st -> js file stream akare download
2nd -> stream data gula ke token e vag kore neya
3rd -> token gula ekta parsing phase diye jauya . ekhane onk dhoroner filtering hoy and onk kichu check kora hoy
4th -> tarpor sei token gula diya ekta AST(Abstract Syntax Tree) banano hoy . jeta amader pura code er ekta structure.
5th -> tarpor AST er code gula Interpreter er kase jay . Interpreter code gula ke translate kore byte code e convert kore
6th -> Byte code gulaii browser er giye execute hoye result show kore user er kase


akhon porjonto jei jei process dekhlam egula 2008 porjonto use kora hoy . kintu tarpor ei process change hoy kichu ta. 2008 e chrome er v8 js engine niye ashe . 

byte code er kichu limitation ase . jemon byte code kichu ta default behaviour kore . jemon apni jodi burger khete chan tahole ai type er burger khete hobe . nijer eccha moto burger customize kore khete parben na . aro kichu problem ase byte code er . tokhon v8 engine er js bole je tumi amader byte code gula ke diye deu segula browser er execute na kore . sei byte code gula ke ami compiler er moddhe diye run kori . 

orthat v8 akhon byte code gula ke browser e execute hote na diye nijer kase niye ekta compiler er moddhe run kore . jar nam Turbo Fan 

Turbo Fan compiler er kaj ki ?
ai compiler byte code er vitor nojor rakhe je kon kon code gula amon ase jegula barbar use hocche. jodi compiler dekhe je kono specific code barbar call hocche tokhon ai compiler nijer moto kore seta ke optimized kore fast kore dibe. optimized korar somoy se user er hardware , os , software sob kichu bibechona kore optimized korbe . tar fole low configuration er hardware er moddheo javascript fast chole.
ai karonei javascript ke bola hoy this is a interpreted and compiled language
etaii pura process updated process !