QUESTION : Web Apis ki ? 

Answer : amader code sob callstack e jay . callstack holo one kind of javascript run time . tar mane javascript run time e callstack e perform hoy . javascript run time er somoy callstack e jodi setTimeout, promises, fetch, localstorage, session storage, Animations, document etc async code thake tokhon javascript run time seta Browser ke diya dey solve korar jonno . karon callstack seta solve korte pare na . egula Browser er part . kintu Browser ke kivabe dibe ? via Web Apis . Web Api er maddhome async code gula Browser e jay . Browser er kaj sesh hole segula abar callstack e ferot pathate hoy , karon sob kichu din sesh e callstack thekei execute hoy . sei somoy Browser Web Api ke call kore and Web Api er maddhome callstack e segula ferot pathano hoy . 

ekhane Web Api er Api ta ki ? 
Api holo 2 ta system er moddhe conncetion er maddhom ba Media . ekhane callstack er sathe Browser er connection e help korchi Web Api . tai take Api bola hoy 

Some Popular Web Apis
1. Console.log()
2. document
3. localstorage
4. session storage
5. cookies
6. promises
7. setTimeout
8. geolocation

Arekta Important Question : 
Question : jokhon Browser er kaj sesh hobe then sekhane thaka callback ki Browser or Web Apis execute korte parbe ?
Answer : NO . Web api or Browser setTimeout, promises, geolocation etc e thaka callback call or execute kore na . callback tai muloto callstack e dibe jeta callstack execute kore stack theke ber kore dibe 

But arekta Important Question royeche . 
Question : callstack directly Web Apis ke async code gula dey seta sotto and Web Apis directly seta Browser ke dey etao sotto but Browser jokhon kaj sesh kore Web Apis er kache code gula ferot dey or callback gula dey tokhon ki Web Apis directly callstack e diye dey ? 
Answer : No . callstack hoyto tokhon busy thake onno task complete korar jonno . tai code ferot deyar khetre kokhonoii Web Apis callstack er sathe directly communication kore na . tokhon Web Apis Task Queue te diye dey . Task Queue tokhon Event loop er maddhome check kore je callstack khali kina or callstack free ase kina . jodi free thake tokhon event loop priority basis e callstack e push kore data . 


Again a Question for see Browser Power 
Question : jodi callstack single thread houyar karone heavy task gula Browser ke diye dey tahole Browser kivabe segula handle kore ? 
Answer : Yes Browser khubii powerfull . karon Browser C++ diye lekha . C++ multi threaded language . tai Browser ekii sathe onk gula task korte pare but javascript run time single task complete kore at a time . 

some Browser Features : 
1. Rendering 
2. Camera
3. Mic
4. Network Services
5. GPU
6. Sensors
and so on..

jar karone amra application e camera , mic or some Network features easily access korte pari with others work on application . karon egula Browser parrally manage kore , not singly. 


setTimeout niye ekta big mistake or Myth akhn bolbo : 
amra jani setTimeout er moddhe ekta time pass kora hoy and amra sobai mone kori ai time er pore execute hobeii hobe . kintu eta wrong . time ta aijonnoi set kora hocche ai time complete hoile Browser sei callback ta Web Apis e diye dibe and Web Apis sei callback code ta Task queue te diye rakhbe and wait korbe kokhon event loop take callstack e niye jabe . orthat time ta only Browser er jonno je ai time er por Browser code ta Web apis e diye dibe . 


Rendering Pipelines :
function demo(){
    const box = document.getElementByClassName("box-r")

    box.style.backgroundColor = "blue"
    box.style.backgroundColor = "red"
    box.style.backgroundColor = "green"
    box.style.backgroundColor = "yellow"
    box.style.backgroundColor = "lime"
    box.style.backgroundColor = "purple"
    box.style.backgroundColor = "orange"
    box.style.backgroundColor = "maroon"

}
ekhane ami dom manupulation korechi .
The Question is : 
Question : jokhon ami dom manipulation kori tahole ki setao one by one hoye thake ? 
Answer : No. eta kono javascript code na . eta web api . orthat ai code gula javascript bujhe na . jokhon airokom dom related code ashe javascript tokhon code gula ke web api te diye dey and web api Browser ke diye dey . 

akhn kotha hocche ekhane box.style.backgroundColor onkbar kora hoise . tahole ki Browser sob gulaii ekta ekta kore korbe ? 
Answer is NO. jokhon Browser dekhbe same kaj barbar chacchi tokhon Browser vabbe je mone hoy ami last attempt "maroon" setaii korte chacchi and setaii kore dibe and baki uporer gula delete kore dibe . tai jodi demo call kora hoy tokhon kokhonoii sob gula color ashe na . last color taii ashe . karon Browser uporer gula delete kore last er taii apply kore . 

Important Notes : javascript code always runs to completion before any Rendering can happen . tar bangla ortho holo : JavaScript এর যেকোনো কোড একবার শুরু হলে, সেটা পুরোপুরি শেষ না হওয়া পর্যন্ত ব্রাউজার কিছু রেন্ডার করবে না।

ধরুন আপনি লিখলেন:
document.querySelector("div").style.backgroundColor = "blue";
while (true) {}

এখানে প্রথম লাইনে div এর ব্যাকগ্রাউন্ড কালার পরিবর্তনের জন্য বলা হয়েছে।
কিন্তু দ্বিতীয় লাইনে একটা infinite loop দিয়ে JavaScript আটকে গেছে।

এখন আপনি ভাবছেন — “ব্যাকগ্রাউন্ড তো বদলে যাওয়ার কথা!”
কিন্তু তা হবে না, কারণ JavaScript প্রথমে পুরো কোডটা "run to completion" করবে — অর্থাৎ পুরো কাজ শেষ না হওয়া পর্যন্ত render (দেখানো) করবে না।


Topic : RAF - requestAnimationFrame 
function demo(){
    const box = document.getElementByClassName("box-r")

    box.style.backgroundColor = "blue"
    box.style.backgroundColor = "red"
    box.style.backgroundColor = "green"
    box.style.backgroundColor = "yellow"
    box.style.backgroundColor = "lime"
    box.style.backgroundColor = "purple"
    box.style.backgroundColor = "orange"
    box.style.backgroundColor = "maroon"

    requestAnimationFrame(()=>{
        box.style.backgroundColor='aqua'
    })

}
akhn ki hobe ? akhn color aqua dekhabe . not maroon 
karon requestAnimationFrame has higher priority than other dom operations

tar mane same kaj er belay jodi oi kaj requestAnimationFrame er callback e thake seta Browser dhore and baki gula skip kore setaii apply kore . 

Important Notes : 
first e requestAnimationFrame er callback run kore before any css or any layout thing can happen
eta ekta order e chole - RAF -> CSS Calculation -> Layout Calculation -> Paint

example : upore Browser ke instruction dey je box ke maroon color korte hobe . tar ageii Browser ke requestAnimationFrame bole dey je box ke aqua korte hobe . jehetu eta higher priority tai Browser bolbe je jehetu same task er jonno requestAnimationFrame theke instruction ashce tai etaii apply hobe . 


one Important things : 
Browser can wait for Rendering, and when it's right time to do the rendering, they do the rendering. 
JavaScript will always run to completion before rendering can happen


Important : 
akhn ami prothomeii 60FPS er bishoy ta clear korbo sathe Browser er bishoy gulao : 

Question : ব্রাউজার কেন ১৬ms পর পর render করে? আর এর সাথে ৬০FPS-এর সম্পর্কটা কী?

Step-by-step বোঝার চেষ্টা করি:
1. Monitor কীভাবে কাজ করে?
আপনি যে Monitor বা Screen ব্যবহার করছেন, সেটা প্রতি সেকেন্ডে নির্দিষ্ট সংখ্যক frame দেখায়।

"Frame" মানে কী?
একটা frame মানে একটা সম্পূর্ণ ছবি (snapshot) যেটা আপনার স্ক্রিনে আসে।

Most monitors run at: 60Hz
মানে হলো:
প্রতি সেকেন্ডে ৬০টা frame display করতে পারে।

তাহলে ১ সেকেন্ডে কয় ms?
1 second = 1000 milliseconds
তাহলে ৬০টি frame দেখাতে কত সময় লাগে?
1000ms ÷ 60 = 16.67ms (প্রায় ১৬ms)
অর্থাৎ, প্রতি ফ্রেমের জন্য ব্রাউজার/মোনিটরের কাছে সময় থাকে প্রায় 16ms।

তাই ব্রাউজার কী ভাবে?
“যেহেতু আমার স্ক্রিন প্রতি ১৬ms এ নতুন frame নেয়,
তাই আমি প্রতি ১৬ms পর নতুন frame রেন্ডার করবো।
না হলে frame drop হবে বা lag করবে।”

Rendering Timeline : ./images/RenderingTimelin.png 
---- ai image ta dekhte hobe images folder e giye..

যদি আপনি 16ms এর বেশি সময় নিয়ে ফেলেন?
ধরুন আপনি কোনো function এ 25ms সময় নিচ্ছেন (যেমন একটা heavy loop)।

তখন কী হবে?

1. আপনার কোড চলা শেষ না হওয়া পর্যন্ত render block হবে
2. ব্রাউজার ১৬ms এর মধ্যে রেন্ডার করতে পারবে না
3. তখন frame drop হবে
4. UI laggy বা stuttered লাগবে

এজন্যই performance guide বলে:
"আপনার যেকোনো animation, UI update, বা heavy calculation এমনভাবে design করুন যেন ১৬ms এর মধ্যেই শেষ হয়।"

এখন সংক্ষেপে বলি:
60 FPS -> প্রতি সেকেন্ডে ৬০টা ছবি দেখানো (frame)
1 Frame -> প্রায় ১৬ms সময় পায়
ব্রাউজার ->	প্রতি ১৬ms পরে ১টা render টাইম ধরে
কারণ ->	Monitor ঠিক ঐ ১৬ms পরে পরেই নতুন ছবি নেয়
যদি দেরি হয় -> তাহলে Frame Drop হয় (Lag করে)

তাই শেষ কথা:
ব্রাউজার প্রতি ১৬ms এ রেন্ডার করে, কারণ আপনার মনিটর প্রতি ১৬ms এ একটা নতুন ছবি (frame) দেখাতে পারে। এই মিলেই তৈরি হয় 60FPS এর বাস্তবতা।



onekeii mone kore jodi ami dom diye kono ui change kori tahole seta satheii satheii hoye jay . kintu na . Browser wait kore thake . kotokkhon wait kore ? ideally 16ms.
kintu keno ? 
majority of monitor that are calibrated. mane holo Monitor => 60FPS
tar mane holo 
1 second e 1000ms tai 1000/60 = 16ms
tar mane holo 16ms por por screen e ekta kore frame ashe . eta eto druto ashe je amra bujhte pari na . tai bujhar bishoy holo proti 16ms por por Browser ui update kore frame banaiya seta display kore . 
eta bujhar jonno aro deeply jodi boli frame mane holo ekta snapshot er moto . eta barbar 16ms por por ui te ashte thake tai amra bujhte pari na . amader kase mone hoy screen static. mane isthir . kintu eta barbar frame create kore dekhacche . proti bar Browser check kore je developer kono notun ui change korlo kina . se sei changes gula sathe sathe update kore na . seta ekta batch update er moddhe rakhe . mane holo sob kichu eksathe observe kore final ui ta ber kore and seta change kore 1 ta frame banay and ui te dekhay . 
Browser onk intelligent , karon se jane je ekta frame 16ms er poreii change hobe . tai ami ui ke 16ms er poreii update korbo .  
tai techniqally developers 12-14ms er moddhe work korte hobe. amar ui related functionality jeno 12-14 ms cross na kore . karon exactly 16ms pore Browser ke oi changes gula niye frame baniye ui te update korte hobe . tai amake 16ms er ageii orthat 12-14ms e kaj ta koraite hobe . jodi amar kono function 12-14ms theke beshi time ney tahole amar ui tokhon legyness hoye jay, frames drop hoy . ai karone delay hoye thake . 
eta kivabe solve korbo ? 
amar code ke 2 ta part e vag korte pari . 
function longRunningTask(){
    firstHalf(){}
    setTimeout(()=>{},1000)
} 
ekhane ami firstHalf ke sathe sathe run korsi but heavy task jeta setTimeout e diye disi jate kichukkhon pore run hoy . tar karone amra ui ke freez na kore heavy task gula kichu ta delay koraiya show korai and frame 16ms por por ee cholte thake without any delay . 



requestAnimationFrame : 
eta amader jonno best friend jokhon amra kono style change korbo ui te . karon requestAnimationFrame ke Browser provide kore for developers jeno tara style changes gula smoothly korte pare . requestAnimationFrame ui styles change er bishoy gula manage kore . Browser jokhonii dekhbe requestAnimationFrame tokhonii bujhe jabe amake ui te kono changes ante hobe . and Browser tokhonii ui update korbe jokhon update korar proyojon hobe. otherwise update korbe na . 


RAF vs setTimeout 
amra jodi requestAnimationFrame diye kono ui update korte chai , dhoren ekta box seta ekta button click er dara left theke right e niye jaite chai tokhon requestAnimationFrame always 16ms por por ui update korbe . tar mane holo 16ms por por se 1 step kore samne agabe . 1step = jodi 1px hoy tahole proti 16ms por por 1px kore right e jabe . 
but setTimeout er belay erokom hoy na . setTimeout e jodi amra kono time set na kori tahole by default jokhonii call stack khali hoy tokhonii se callstack e jauyar jonno ready hoye jay and call stack e giye execute hoye jay . jodi dhoren setTimeout er kaj 2 ms e sesh hoye jay tahole 2ms poreii se 1 step right e chole jabe . 1 step = 1px hole 2ms por por se 1px kore right e jabe . eta requestAnimationFrame thekeo beshi fast e agabe . karon requestAnimationFrame joto jai hok 16ms poreii ui update kore . kintu setTimeout er belay jokhonii kaj sesh hoy tokhonii ui update koraiya dey . 
kintu jodi setTimeout er vitorer code onk late kore execute hoy tahole se sei onujayii ui update kore . jodi execute hoite 50ms lage tahole 50ms por por 1px kore right e jay. ei khetre se requestAnimationFrame theke late kore ui update kore . 
tar mane bujha gelo requestAnimationFrame ekdom loyal . se joto jai hok 16ms por por frame banay or ui update kore . but setTimeout er belay tar jokhonii kaj sesh hobe and callstack theke execute hoite parbe tokhonii ui update kore 



Topic : Task Queue 

Task Queue te onk gula child task queue thake . er moddhe sobcheye Popular 4 ta queue hocche : 
1. Micro Task Queue 
2. requestAnimationFrame callbacks (RAF) Queue
3. Rendering Queue
4. Macro Task Queue

ekhane sobcheye beshi priority hocche micro , then requestAnimationFrame, then rendering q and last e macro q . 
ebar ashi janar try kori kon queue te ki ki jay ? 

1. Micro Task Queue : promises (then(), catch(), finally()) , MutationObserver (dom e kichu change hoise kina, ui change hoise kina jeta check korte thake)
2. requestAnimationFrame : requestAnimationFrame er moddhe jei callback ta pass kora hoy and sei callback e jei ui changing code likha hoy seta 
3. Rendering Queue : Dom related jei changes , css change, text content change  etc mainly Dom related bishoy gula rendering queue handle kore 
4. Macro Task Queue : setTimeout, setInterval, event listener(document.addEventListener)



Topic : Event Loop 
Definition of Event Loop : Event loop just ekta function jar kaj hocche always check kora je call stack khali hoise kina . jodi callstack khali pay tokhon se task queue te ashe and priority basis e vibinno task se callstack e dhukaite thake . just etaii event loop  


Important Notes : 
jokhon event loop task queue theke priority basis e task callstack e pass kore tokhon vibinno child task queue er jonno ek ek vabe kaj kore . 
jemon ? 
micro task queue er belay ekrokom , macro task queue er belay arek rokom way te callstack e pathay . 
Bekkha : jokhon callstack khali pay tokhon sathe sathei event loop task queue check kore . se sobar age micro task queue check kore . jodi oikhane kono kichu pay tahole segula callstack e diye abar callstack khali houyar jonno wait kore . callstack khali hoile event loop abaro micro task queue te khuje . evabe jotokkhon na micro task queue khali na hoy se niche thaka RFA , Rendering, Macro ei queue gula te jay na . jokhon dekhe micro task queue khali tokhon RFA (requestAnimationFrame) queue te aisha check kore ki ase . jodi pay tahole callstack e diye dey . evabe se nicher dike jay . 
kintu Macro Task queue er belay erokom kore na . Macro task queue te jokhon event loop jay and sekhan theke code callstack e pathanor por abar sathe sathe macro task queue te ashe na . se abar micro task queue theke check kore . evabe similar vabe check korte korte last e macro task queue te ashe . 

final kotha hocche : micro task queue er belay jotokkhon na micro task khali hocche totokkhon event loop r kono task queue te jay na . but macro task queue er belay single single kore macro theke task ney and prottebar deyar por abar micro theke start kore and micro khali thakle then macro te ashe . 

