console.log(1)
setTimeout(() =>{
    console.log(2)
}, 2000)
setTimeout(() =>{
    console.log(3)
},1000)
setTimeout(() =>{
    console.log(4)
}, 3000)
setTimeout(() =>{
     console.log(5)   
})
setTimeout(() =>{
    console.log(6)
}, 1500)
console.log(7)
---- ekhane prothomeii 1 and 7 print hobe then setTimeout er sobcheye kom somoyer code gula age print hobe then baki gual 
result : 1 7 5 3 6 2 4 



topic : Problem of setTimeout
amra jokhon setTimeout e kono time set kori tokhon amra mone kori je oi time er por amar result output show hobe . but eta sotti na . output ashte aro delay hoite pare . jar karone amader expected result ashbe na . 
example code : 
setTimeout(() =>{
    console.log('setTimeout running!');
}, 10)

let i=0
while(i<100000000){
    i++
}
let z=0
while(z<100000000){
    z++
}
let a = 0
while(a<100000000){
    a++
} 
-------- ai code run korle 1-2 second pore setTimeout er vitor console.log hobe . kintu time disilam matro 10 mili second



Higher order function ki ? 
jei function tar argument e onno ekta function ke recieve kore setaii holo higher order function and sei recieve kora function ta holo callback function .


Important Note for Promise : 
kichu bochor ag porjonto Promise only browser er part chilo . kintu recent kichu somoy age Promise javascript er part hoye jay but still execution soho kichu task akhono browser handle kore 


Promise er sob somoy 2 ta phase hoye thake . 
1. Creation Phase 
2. Consumption Phase

1. Creation Phase : 
const p1 = new Promise()
jokhon ami etotuku korbo tokhon ami ekta promise object create korechi . akhn eta partially create hoyeche . etotuku korle error ashbe . karon ekhane ami promise create korechi but kono contract kori nai . contract bolte ami kono kaj dei nai jetar vittite se amake promise korbe je kaj ta kore callstack e ashbe . tai Promise() er vitore ekta callback ashbe . sekhane kaj bole dite hobe 

tahole ki korte hobe ? 
const p1 = new Promise(function(){
    setTimeout(function(){
        console.log('Done')
    }, 3000)
})
---- to ekhane Promise extra ki korlo ? karon ei jinish ta to ami setTimeout diyei korte partam . tahole Promise keno laglo ? actually setTimeout ai karoneii bad karon ekhane ekta time deya ase . hoyto sei kaj ta korte amr 1 second laglo but diye rakhsi 3 second , ekhane 2 second loss . hoyto ai kaj ta amar korte 5 second laglo but diye rakhsi 3 second . tate jodio 5 second poreii code ta run hote pare but amar thinking onujayii data tokhon pabo na . ei somossha ta solve kore promise 

-- ek kothay just promise etaii setTimeout theke better je time er kono issue nai . jokhonii kaj complete hobe tokhon promise seta javascript ke janaiya dibe . ekhaneii promise better than setTimeout 


 









1. Promise.all()
ব্যাখ্যা:
Promise.all() একসাথে অনেকগুলো Promise নেয় এবং সবগুলো সফল হলে রেজাল্ট রিটার্ন করে। কিন্তু যেকোনো একটি Promise ব্যর্থ (reject) হলেই পুরোটা reject হয়ে যায়।

Use-case:
যখন আপনি একাধিক async কাজ একসাথে করতে চান, এবং সবগুলো সফল হলেই পরবর্তী ধাপে যেতে চান।

Structure:
Promise.all([promise1, promise2, promise3])
    .then(results => {
        console.log(results); // সবগুলোর রেজাল্টের অ্যারে
    })
    .catch(error => {
        console.error(error); // যেকোনো একটি error পেলেই এখানে আসবে
    });

উদাহরণ:
const p1 = Promise.resolve(" Apple");
const p2 = Promise.resolve(" Banana");
const p3 = Promise.resolve(" Orange");

Promise.all([p1, p2, p3])
  .then(result => {
    console.log(result); // [" Apple", " Banana", " Orange"]
  });
Note: যদি কোনো একটি reject হয়, তাহলে আর অন্যগুলোর রেজাল্ট দেখা যাবে না।


2. Promise.allSettled()
ব্যাখ্যা:
Promise.allSettled() সবগুলো Promise-এর ফলাফল রিটার্ন করে, সফল হোক বা ব্যর্থ, সবগুলোর অবস্থা বলে দেয়।

Use-case:
যখন আপনি চান সব Promise শেষ হোক, তারপর জানতে চান কোনটা success আর কোনটা failed।

Structure:
Promise.allSettled([promise1, promise2])
  .then(results => {
    console.log(results);
  });

উদাহরণ:
const p1 = Promise.resolve("Done");
const p2 = Promise.reject("Failed");

Promise.allSettled([p1, p2])
  .then(results => {
    console.log(results);
  });

Output:
[
  { status: "fulfilled", value: "Done" },
  { status: "rejected", reason: "Failed" }
]
Note: সবগুলোর অবস্থা জানানো হয়, তাই error এর জন্য catch প্রয়োজন নেই।



3. Promise.race()
ব্যাখ্যা:
Promise.race() যেই Promise সবার আগে settle (fulfilled or rejected) হয়, সেটা রেজাল্ট হিসেবে ফেরত দেয়।

Use-case:
যখন আপনি fastest result চান, যেই async task আগে শেষ হবে তার output নিয়ে কাজ করবেন।

Structure:
Promise.race([promise1, promise2])
  .then(result => console.log(result))
  .catch(error => console.error(error));

উদাহরণ:
const p1 = new Promise(resolve => setTimeout(() => resolve("Fast One"), 100));
const p2 = new Promise(resolve => setTimeout(() => resolve("Slow One"), 500));

Promise.race([p1, p2])
  .then(result => {
    console.log(result); // Fast One
  });
Note: প্রথমে যেটা settle হবে (fulfilled or rejected), সেটাই রেজাল্ট।



4. Promise.any()
ব্যাখ্যা:
Promise.any() একাধিক Promise-এর মধ্যে যেটা প্রথমে সফল (fulfilled) হবে, সেটার রেজাল্ট রিটার্ন করে। যদি সবগুলো ব্যর্থ হয়, তখন AggregateError দেখায়।

Use-case:
যখন আপনি চান যেকোনো একটি কাজ সফল হলেই সেটা নিয়ে কাজ শুরু করতে।

Structure:
Promise.any([promise1, promise2])
  .then(result => console.log(result))
  .catch(error => console.error(error)); // AggregateError

উদাহরণ:
const p1 = Promise.reject("First failed");
const p2 = Promise.resolve("Second passed");
const p3 = Promise.resolve("Third passed");

Promise.any([p1, p2, p3])
  .then(result => {
    console.log(result); // Second passed
  });

যদি সবগুলো Reject হয়:
Promise.any([
  Promise.reject("A"),
  Promise.reject("B")
])
.catch(err => {
  console.error(err); // AggregateError
});

