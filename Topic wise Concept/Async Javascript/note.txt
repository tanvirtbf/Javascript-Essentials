console.log(1)
setTimeout(() =>{
    console.log(2)
}, 2000)
setTimeout(() =>{
    console.log(3)
},1000)
setTimeout(() =>{
    console.log(4)
}, 3000)
setTimeout(() =>{
     console.log(5)   
})
setTimeout(() =>{
    console.log(6)
}, 1500)
console.log(7)
---- ekhane prothomeii 1 and 7 print hobe then setTimeout er sobcheye kom somoyer code gula age print hobe then baki gual 
result : 1 7 5 3 6 2 4 



topic : Problem of setTimeout
amra jokhon setTimeout e kono time set kori tokhon amra mone kori je oi time er por amar result output show hobe . but eta sotti na . output ashte aro delay hoite pare . jar karone amader expected result ashbe na . 
example code : 
setTimeout(() =>{
    console.log('setTimeout running!');
}, 10)

let i=0
while(i<100000000){
    i++
}
let z=0
while(z<100000000){
    z++
}
let a = 0
while(a<100000000){
    a++
} 
-------- ai code run korle 1-2 second pore setTimeout er vitor console.log hobe . kintu time disilam matro 10 mili second



Higher order function ki ? 
jei function tar argument e onno ekta function ke recieve kore setaii holo higher order function and sei recieve kora function ta holo callback function .


Important Note for Promise : 
kichu bochor ag porjonto Promise only browser er part chilo . kintu recent kichu somoy age Promise javascript er part hoye jay but still execution soho kichu task akhono browser handle kore 


Promise er sob somoy 2 ta phase hoye thake . 
1. Creation Phase 
2. Consumption Phase

1. Creation Phase : 
const p1 = new Promise()
jokhon ami etotuku korbo tokhon ami ekta promise object create korechi . akhn eta partially create hoyeche . etotuku korle error ashbe . karon ekhane ami promise create korechi but kono contract kori nai . contract bolte ami kono kaj dei nai jetar vittite se amake promise korbe je kaj ta kore callstack e ashbe . tai Promise() er vitore ekta callback ashbe . sekhane kaj bole dite hobe 

tahole ki korte hobe ? 
const p1 = new Promise(function(){
    setTimeout(function(){
        console.log('Done')
    }, 3000)
})
---- to ekhane Promise extra ki korlo ? karon ei jinish ta to ami setTimeout diyei korte partam . tahole Promise keno laglo ? actually setTimeout ai karoneii bad karon ekhane ekta time deya ase . hoyto sei kaj ta korte amr 1 second laglo but diye rakhsi 3 second , ekhane 2 second loss . hoyto ai kaj ta amar korte 5 second laglo but diye rakhsi 3 second . tate jodio 5 second poreii code ta run hote pare but amar thinking onujayii data tokhon pabo na . ei somossha ta solve kore promise 

-- ek kothay just promise etaii setTimeout theke better je time er kono issue nai . jokhonii kaj complete hobe tokhon promise seta javascript ke janaiya dibe . ekhaneii promise better than setTimeout 


 
Promise

Creation Phase
const p1 = new Promise(function (resolve, reject) {
  setTimeout(function () {
    console.log("Done");
    resolve("promise done");
  }, 3000);
});
console.log(p1);

Consumption Phase
p1.then((data) => console.log(data))
  .catch((err) => console.log(err))
  .finally(() => {
    console.log("complete this promise");
  });



Implement a Promise via Class

class MyPromise{
  constructor(callback){
    callback(this.resolve, this.reject)
  }

  #resolve(){

  }
  #reject(){

  }

  then(){

  }
  catch(){

  }
  finally(){

  }

}

const p1 = new MyPromise(function(res, rej) {

})

console.log(p1);

akhn ami ai MyPromise ke workable banabo real life Promise er motoi 

const States = {
  PENDING : "PENDING",
  FULLFILLED : "FULLFILLED",
  REJECTED : "REJECTED"
}

class MyPromise{

  #promiseState=States.PENDING
  #handlers = [];

  constructor(callback){
    callback(this.#resolve, this.#reject)
  }

  #resolve(value){
    this.#promiseState= States.FULLFILLED;

    this.#handlers.forEach((fns) =>{
      fns(value)
    })
  }

  #reject(value){

  }

  then(thenCallback){
    this.#handlers.push(thenCallback)
  }

  catch(){

  }

  finally(){

  }

}

const p1 = new MyPromise(function(res, rej) {
  setTimeout(() =>{
    console.log('Time From MyPromise');
  }, 3000)
})

p1.then((data) =>{
  console.log("Data from Resolve", data);
  console.log("I am Inside then Block");
})

console.log(p1);


How Then Works 

const p1 = new Promise((res, rej) => {
  setTimeout(() => {
    res(1)
  }, 2000)
})

p1.then((data) => {
  console.log(data);
}).then((data2) =>{
  console.log(data2);
})
ekhane data2 console.log korle undefined ashe . kno ashlo ? first time then er somoy to data thiki ashce . 
karon ta holo p1.then() first time e take setTimeout theke resolve call kore 1 diye deya hoy res(1) evabe . but next then to ashce first then theke . sekhane kisuii return kora hoy na . 

tahole kisui jodi return na hoy tahole ki actually kisuii return hoy na ? 
answer is NO . jodi ami kono then e kisu return nao kori tao Promise internally ekta resolve method return kore . 

Important notes ***********
prottekta then() method ekta Resolved Promise return kore . kon resolve promise ? jeta ami upore original promise er callback function e res(1) korchi setaii . karon ai res(1) dara sei p1 promise er first then e 1 chole jay using Resolved Promises. next then ke data dibe first then . evabeii chaining chole . so next then ke jodi first then kisu return nao kore taholeo internally "return Promise.resolve()" eta kore amader jonno . r jodi ami first then e return 2 kore dei tahole internally first then() method eta kore - "return Promise.resolve(2)" . r ei 2 data ta next then er arguments e chole jay .

mot kotha then() method always return a Resolve Promise



then(), catch(), finally() chaining ta kivabe chole ektu dekhai. 
//Important notes*****
 amra upore manually Promise implement korar somoy dekhaisi je handlers nam e ekta array ase jekhane then() method er sob function push hocche . and ekta ekta kore call hocche. similerly catch() method er jonno o array thake jekhane catch er joto method ase sob push hoy and finally er khetreo same . 

Example : 
.then(){

}.then(){

}.catch(){

}.finally(){

}.finally(){

}
--- ekhane first 2 ta then cholbe and niche thaka catch ignore kore finally 2 ta cholbe . karon state is resolve . 
r jodi state is reject hoito tahole upore 2 ta then ignore hoito and nicher finally 2 ta call hoito . 

another example code : 
.then(){}
.then(){}
.catch(){}
.then(){}
.finally(){}
.finally(){}
----- ekhane upore first 2 ta then ignore hobe . niche thaka catch() run hobe and tarpore thaka then o call hobe . tarpor 2 ta finally call hobe . 
jodi catch theke kichu return kori tahole porer line e thaka then seta recieve korte parbe 

Example : 
.then(){}
.then(){}
.catch(){
  return 2
}.then(data => {
  console.log(data); 2
})
.finally(){}
.finally(){}

ekhane catch theke jeta return hoise seta then e dhorte parsi and run hoise 

Important notes*********  : 
catch er pore joto then ase sob call hobe but catch er age thaka kono then call hobe na 




Important Notes ************
catch er pore jodi arekta catch thake tahole seta call hobe na . catch only 1 taii call hobe . but catch er pore then thakle seta thiki call hobe 

Example : 
.then(){}
.then(){}
.then(){}
.catch(){}
.then(){}
.catch(){}
.finally(){}

-------- ekhane second catch call hobe na 


akhn ami ja ja sikhechi sob gula test korbo Promise diye 

const p1 = new Promise(function (resolve, reject) {
  setTimeout(() =>{
    console.log('Done');
    reject('Promise Done!')
  }, 3000)
})
p1.then((data) =>{
  console.log(data);
  return `${data}2`
}).then((data) => {
  console.log(data);
  return `${data}3`
}).catch((err) =>{
  console.log(err);
  return `${err}error1`
}).then((data) =>{
  console.log(data);
}).finally(() =>{
  console.log('Finally 1');
}).finally(() =>{
  console.log('Finally 2');
})


akhn ami ekta interesting bishoy bolbo 
question is ami jodi chai je amar state jokhon catch e jabe tokhon jeno .then() er pore thaka .catch() e na jay . tahole kothay jabe ? 
then() er first argument holo ekta callback and second argument holo catch block . mane ? 
mane holo prottekta then() method er second argument holo ekta catch block . tahole jodi state reject e jay tahole .catch() e na jeye .then() er second argument e jabe and oitaii execute hobe .

Example :
const p1 = new Promise(function (resolve, reject) {
  setTimeout(() =>{
    console.log('Done');
    reject('Promise Done!')
  }, 3000)
})
p1.then((data) =>{
  console.log(data);
  return `${data}2`
}).then((data) => {
  console.log(data);
  return `${data}3`
}).catch((err) =>{
  console.log(err);
  return `${err}error1`
}).then((data) =>{
  console.log(data);
}).finally(() =>{
  console.log('Finally 1');
}).finally(() =>{
  console.log('Finally 2');
})



Summary of Promises
1. then finally and catch are returns a resolved promise
2. you can have multiple then, multiple catch and multiple finally
3. only first catch will get executed, other catch will ignored
4. you can pass a 2nd argument to then block, which act as a catch function, priority will be give to this.









1. Promise.all()
ব্যাখ্যা:
Promise.all() একসাথে অনেকগুলো Promise নেয় এবং সবগুলো সফল হলে রেজাল্ট রিটার্ন করে। কিন্তু যেকোনো একটি Promise ব্যর্থ (reject) হলেই পুরোটা reject হয়ে যায়।

Use-case:
যখন আপনি একাধিক async কাজ একসাথে করতে চান, এবং সবগুলো সফল হলেই পরবর্তী ধাপে যেতে চান।

Structure:
Promise.all([promise1, promise2, promise3])
    .then(results => {
        console.log(results); // সবগুলোর রেজাল্টের অ্যারে
    })
    .catch(error => {
        console.error(error); // যেকোনো একটি error পেলেই এখানে আসবে
    });

উদাহরণ:
const p1 = Promise.resolve(" Apple");
const p2 = Promise.resolve(" Banana");
const p3 = Promise.resolve(" Orange");

Promise.all([p1, p2, p3])
  .then(result => {
    console.log(result); // [" Apple", " Banana", " Orange"]
  });
Note: যদি কোনো একটি reject হয়, তাহলে আর অন্যগুলোর রেজাল্ট দেখা যাবে না।


2. Promise.allSettled()
ব্যাখ্যা:
Promise.allSettled() সবগুলো Promise-এর ফলাফল রিটার্ন করে, সফল হোক বা ব্যর্থ, সবগুলোর অবস্থা বলে দেয়।

Use-case:
যখন আপনি চান সব Promise শেষ হোক, তারপর জানতে চান কোনটা success আর কোনটা failed।

Structure:
Promise.allSettled([promise1, promise2])
  .then(results => {
    console.log(results);
  });

উদাহরণ:
const p1 = Promise.resolve("Done");
const p2 = Promise.reject("Failed");

Promise.allSettled([p1, p2])
  .then(results => {
    console.log(results);
  });

Output:
[
  { status: "fulfilled", value: "Done" },
  { status: "rejected", reason: "Failed" }
]
Note: সবগুলোর অবস্থা জানানো হয়, তাই error এর জন্য catch প্রয়োজন নেই।



3. Promise.race()
ব্যাখ্যা:
Promise.race() যেই Promise সবার আগে settle (fulfilled or rejected) হয়, সেটা রেজাল্ট হিসেবে ফেরত দেয়।

Use-case:
যখন আপনি fastest result চান, যেই async task আগে শেষ হবে তার output নিয়ে কাজ করবেন।

Structure:
Promise.race([promise1, promise2])
  .then(result => console.log(result))
  .catch(error => console.error(error));

উদাহরণ:
const p1 = new Promise(resolve => setTimeout(() => resolve("Fast One"), 100));
const p2 = new Promise(resolve => setTimeout(() => resolve("Slow One"), 500));

Promise.race([p1, p2])
  .then(result => {
    console.log(result); // Fast One
  });
Note: প্রথমে যেটা settle হবে (fulfilled or rejected), সেটাই রেজাল্ট।



4. Promise.any()
ব্যাখ্যা:
Promise.any() একাধিক Promise-এর মধ্যে যেটা প্রথমে সফল (fulfilled) হবে, সেটার রেজাল্ট রিটার্ন করে। যদি সবগুলো ব্যর্থ হয়, তখন AggregateError দেখায়।

Use-case:
যখন আপনি চান যেকোনো একটি কাজ সফল হলেই সেটা নিয়ে কাজ শুরু করতে।

Structure:
Promise.any([promise1, promise2])
  .then(result => console.log(result))
  .catch(error => console.error(error)); // AggregateError

উদাহরণ:
const p1 = Promise.reject("First failed");
const p2 = Promise.resolve("Second passed");
const p3 = Promise.resolve("Third passed");

Promise.any([p1, p2, p3])
  .then(result => {
    console.log(result); // Second passed
  });

যদি সবগুলো Reject হয়:
Promise.any([
  Promise.reject("A"),
  Promise.reject("B")
])
.catch(err => {
  console.error(err); // AggregateError
});

